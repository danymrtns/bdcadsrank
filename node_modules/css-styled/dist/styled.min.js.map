{"version":3,"file":"styled.min.js","sources":["../src/utils.ts","../src/styled.ts"],"sourcesContent":["import stringHash from \"string-hash\";\nimport { splitComma } from \"@daybrush/utils\";\nimport { InjectOptions } from \"./types\";\n\nexport function getHash(str: string) {\n    return stringHash(str).toString(36);\n}\nexport function getShadowRoot(parentElement: HTMLElement | SVGElement) {\n    if (parentElement && parentElement.getRootNode) {\n        const rootNode = parentElement.getRootNode();\n\n        if (rootNode.nodeType === 11) {\n            return rootNode as ShadowRoot;\n        }\n    }\n    return;\n}\nexport function replaceStyle(className: string, css: string, options: Partial<InjectOptions>) {\n    if (options.original) {\n        return css;\n    }\n    return css.replace(/([^};{\\s}][^};{]*|^\\s*){/mg, (_, selector) => {\n        const trimmedSelector = selector.trim();\n        return (trimmedSelector ? splitComma(trimmedSelector) : [\"\"]).map(subSelector => {\n            const trimmedSubSelector = subSelector.trim();\n            if (trimmedSubSelector.indexOf(\"@\") === 0) {\n                return trimmedSubSelector;\n            } else if (trimmedSubSelector.indexOf(\":global\") > -1) {\n                return trimmedSubSelector.replace(/\\:global/g, \"\");\n            } else if (trimmedSubSelector.indexOf(\":host\") > -1) {\n                return `${trimmedSubSelector.replace(/\\:host/g, `.${className}`)}`;\n            } else if (trimmedSubSelector) {\n                return `.${className} ${trimmedSubSelector}`;\n            } else {\n                return `.${className}`;\n            }\n        }).join(\", \") + \" {\";\n    });\n}\nexport function injectStyle(className: string, css: string, options: Partial<InjectOptions>, el: Node, shadowRoot?: Node) {\n    const style = document.createElement(\"style\");\n\n    style.setAttribute(\"type\", \"text/css\");\n    style.setAttribute(\"data-styled-id\", className);\n    style.setAttribute(\"data-styled-count\", \"1\");\n\n    if (options.nonce) {\n        style.setAttribute(\"nonce\", options.nonce);\n    }\n    style.innerHTML = replaceStyle(className, css, options);\n\n    const ownerDocument = el.ownerDocument || document;\n    (shadowRoot || ownerDocument.head || ownerDocument.body).appendChild(style);\n    return style;\n}\n","import { getHash, injectStyle, getShadowRoot } from \"./utils\";\nimport { StyledInjector, InjectOptions } from \"./types\";\n\n/**\n * Create an styled object that can be defined and inserted into the css.\n * @param - css styles\n */\nfunction styled(css: string): StyledInjector {\n    const injectClassName = \"rCS\" + getHash(css);\n\n    return {\n        className: injectClassName,\n        inject(el: HTMLElement | SVGElement, options: Partial<InjectOptions> = {}) {\n            const shadowRoot = getShadowRoot(el);\n            let styleElement = (shadowRoot || el.ownerDocument || document).querySelector<HTMLStyleElement>(`style[data-styled-id=\"${injectClassName}\"]`);\n\n            if (!styleElement) {\n                styleElement = injectStyle(injectClassName, css, options, el, shadowRoot);\n            } else {\n                const count = parseFloat(styleElement.getAttribute(\"data-styled-count\")) || 0;\n                styleElement.setAttribute(\"data-styled-count\", `${count + 1}`);\n            }\n            return {\n                destroy() {\n                    const injectCount = parseFloat(styleElement.getAttribute(\"data-styled-count\")) || 0;\n\n                    if (injectCount <= 1) {\n                        if (styleElement.remove) {\n                            styleElement.remove();\n                        } else {\n                            styleElement.parentNode?.removeChild(styleElement);\n                        }\n                        styleElement = null;\n                    } else {\n                        styleElement.setAttribute(\"data-styled-count\", `${injectCount - 1}`);\n                    }\n                },\n            };\n        },\n    };\n}\n\nexport * from \"./types\";\nexport default styled;\n"],"names":["replaceStyle","className","css","options","original","replace","_","selector","trimmedSelector","trim","map","subSelector","trimmedSubSelector","indexOf","join","injectClassName","stringHash","toString","inject","el","style","shadowRoot","parentElement","getRootNode","rootNode","nodeType","styleElement","ownerDocument","document","querySelector","count","parseFloat","getAttribute","setAttribute","createElement","nonce","innerHTML","head","body","appendChild","destroy","injectCount","remove","parentNode","removeChild"],"mappings":";;;;;;;;yyEAiBgBA,EAAaC,EAAmBC,EAAaC,GACzD,OAAIA,EAAQC,SACDF,EAEJA,EAAIG,QAAQ,6BAA8B,SAACC,EAAGC,GAC3CC,EAAkBD,EAASE,OACjC,OAAQD,IAA6BA,OAAmB,CAAC,KAAKE,IAAI,SAAAC,GACxDC,EAAqBD,EAAYF,OACvC,OAAwC,IAApCG,EAAmBC,QAAQ,GAAG,EACvBD,EACwC,CAAC,EAAzCA,EAAmBC,QAAQ,SAAS,EACpCD,EAAmBP,QAAQ,YAAa,EAAE,EACJ,CAAC,EAAvCO,EAAmBC,QAAQ,OAAO,EAClC,UAAGD,EAAmBP,QAAQ,UAAW,WAAIJ,CAAS,CAAE,CAAC,EACzDW,EACA,WAAIX,cAAaW,CAAkB,EAEnC,WAAIX,CAAS,EAE3B,EAAEa,KAAK,IAAI,EAAI,KACnB,CACL,QC/BA,SAAgBZ,GACZ,IAAMa,EAAkB,MDHjBC,ECGiCd,CDHnB,EAAEe,SAAS,EAAE,ECKlC,MAAO,CACHhB,UAAWc,EACXG,OAAA,SAAOC,EAA8BhB,gBAAAA,MACjC,ID0BgBF,EAAmBC,EACrCkB,EC3BQC,WDNYC,GAC1B,GAAIA,GAAiBA,EAAcC,YAAa,CACtCC,EAAWF,EAAcC,cAE/B,GAA0B,KAAtBC,EAASC,SACT,OAAOD,EAInB,ECH6CL,CAAE,EAC/BO,GAAgBL,GAAcF,EAAGQ,eAAiBC,UAAUC,cAAgC,gCAAyBd,OAAmB,EAQ5I,OANKW,GAGKI,EAAQC,WAAWL,EAAaM,aAAa,mBAAmB,CAAC,GAAK,EAC5EN,EAAaO,aAAa,oBAAqB,UAAGH,EAAQ,CAAC,CAAE,IDmBjD7B,ECtBec,EDsBIb,ECtBaA,EDsBAC,ECtBKA,EDsB4BgB,ECtBnBA,EDsB6BE,ECtBzBA,GDuBpED,EAAQQ,SAASM,cAAc,OAAO,GAEtCD,aAAa,OAAQ,UAAU,EACrCb,EAAMa,aAAa,iBAAkBhC,CAAS,EAC9CmB,EAAMa,aAAa,oBAAqB,GAAG,EAEvC9B,EAAQgC,OACRf,EAAMa,aAAa,QAAS9B,EAAQgC,KAAK,EAE7Cf,EAAMgB,UAAYpC,EAAaC,EAAWC,EAAKC,CAAO,EAEhDwB,EAAgBR,EAAGQ,eAAiBC,UACzCP,GAAcM,EAAcU,MAAQV,EAAcW,MAAMC,YAAYnB,CAAK,ECnC9DM,EDoCLN,GC/BQ,CACHoB,yBACUC,EAAcV,WAAWL,EAAaM,aAAa,mBAAmB,CAAC,GAAK,EAE9ES,GAAe,GACXf,EAAagB,OACbhB,EAAagB,SAEb,SAAAhB,EAAaiB,eAAYC,YAAYlB,CAAY,EAErDA,EAAe,MAEfA,EAAaO,aAAa,oBAAqB,UAAGQ,EAAc,CAAC,CAAE,KAM3F"}