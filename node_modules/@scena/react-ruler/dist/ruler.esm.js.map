{"version":3,"file":"ruler.esm.js","sources":["../src/react-ruler/Ruler.tsx","../src/react-ruler/consts.ts"],"sourcesContent":["import * as React from \"react\";\nimport { ref } from \"framework-utils\";\nimport { RulerInterface, RulerProps } from \"./types\";\nimport { convertUnitSize } from \"@daybrush/utils\";\n\nexport default class Ruler extends React.PureComponent<RulerProps> implements RulerInterface {\n    public static defaultProps: RulerProps = {\n        type: \"horizontal\",\n        zoom: 1,\n        width: 0,\n        height: 0,\n        unit: 50,\n        negativeRuler: true,\n        mainLineSize: \"100%\",\n        longLineSize: 10,\n        shortLineSize: 7,\n        segment: 10,\n        direction: \"end\",\n        style: { width: \"100%\", height: \"100%\" },\n        backgroundColor: \"#333333\",\n        font: \"10px sans-serif\",\n        textColor: \"#ffffff\",\n        lineColor: \"#777777\",\n    };\n    public divisionsElement!: HTMLElement;\n    public state = {\n        scrollPos: 0,\n    };\n    public canvasElement!: HTMLCanvasElement;\n    private canvasContext!: CanvasRenderingContext2D;\n    private width: number = 0;\n    private height: number = 0;\n    public render() {\n        return (<canvas\n            ref={ref(this, \"canvasElement\")}\n            style={this.props.style} />);\n\n    }\n    public componentDidMount() {\n        const canvas = this.canvasElement;\n        const context = canvas.getContext(\"2d\")!;\n\n        this.canvasContext = context;\n\n        this.resize();\n    }\n    public componentDidUpdate() {\n        this.resize();\n    }\n    /**\n     * @method Ruler#scroll\n     * @param scrollPos\n     */\n    public scroll(scrollPos: number) {\n        this.draw(scrollPos);\n    }\n    /**\n     * @method Ruler#resize\n     */\n    public resize() {\n        const canvas = this.canvasElement;\n        const {\n            width,\n            height,\n            scrollPos,\n        } = this.props;\n\n        this.width = width || canvas.offsetWidth;\n        this.height = height || canvas.offsetHeight;\n        canvas.width = this.width * 2;\n        canvas.height = this.height * 2;\n        this.draw(scrollPos);\n    }\n    private draw(scrollPos: number = this.state.scrollPos) {\n        const props = this.props;\n        const {\n            unit,\n            zoom,\n            type,\n            backgroundColor,\n            lineColor,\n            textColor,\n            direction,\n            negativeRuler = true,\n            segment = 10,\n            textFormat,\n        } = props as Required<RulerProps>;\n        const width = this.width;\n        const height = this.height;\n        const state = this.state;\n        state.scrollPos = scrollPos;\n        const context = this.canvasContext;\n        const isHorizontal = type === \"horizontal\";\n        const isDirectionStart = direction === \"start\";\n        const isNegative = negativeRuler !== false;\n        const font = props.font || \"10px sans-serif\";\n        const textAlign = props.textAlign || \"left\";\n        const textOffset = props.textOffset || [0, 0];\n        const containerSize = isHorizontal ? height : width;\n        const mainLineSize = convertUnitSize(`${props.mainLineSize || \"100%\"}`, containerSize);\n        const longLineSize = convertUnitSize(`${props.longLineSize || 10}`, containerSize);\n        const shortLineSize = convertUnitSize(`${props.shortLineSize || 7}`, containerSize);\n\n        if (backgroundColor === \"transparent\") {\n            // Clear existing paths & text\n            context.clearRect(0, 0, width * 2, height * 2);\n        } else {\n            // Draw the background\n            context.rect(0, 0, width * 2, height * 2);\n            context.fillStyle = backgroundColor;\n            context.fill();\n        }\n\n        context.save();\n        context.scale(2, 2);\n        context.strokeStyle = lineColor;\n        context.lineWidth = 1;\n        context.font = font;\n        context.fillStyle = textColor;\n\n        if (isDirectionStart) {\n            context.textBaseline = \"top\";\n        }\n        context.translate(0.5, 0);\n        context.beginPath();\n\n        const size = isHorizontal ? width : height;\n        const zoomUnit = zoom * unit;\n        const minRange = Math.floor(scrollPos * zoom / zoomUnit);\n        const maxRange = Math.ceil((scrollPos * zoom + size) / zoomUnit);\n        const length = maxRange - minRange;\n        const alignOffset = Math.max([\"left\", \"center\", \"right\"].indexOf(textAlign) - 1, -1);\n\n\n\n        for (let i = 0; i <= length; ++i) {\n            const value = i + minRange;\n\n            if (!isNegative && value < 0) {\n                continue;\n            }\n            const startPos = (value * unit - scrollPos) * zoom;\n            for (let j = 0; j < segment; ++j) {\n                const pos = startPos + j / segment * zoomUnit;\n\n                if (pos < 0 || pos >= size) {\n                    continue;\n                }\n                const lineSize = j === 0\n                    ? mainLineSize\n                    : (j % 2 === 0 ? longLineSize : shortLineSize);\n\n                const [x1, y1] = isHorizontal\n                    ? [pos, isDirectionStart ? 0 : height - lineSize]\n                    : [isDirectionStart ? 0 : width - lineSize, pos];\n                const [x2, y2] = isHorizontal ? [x1, y1 + lineSize] : [x1 + lineSize, y1];\n                context.moveTo(x1, y1);\n                context.lineTo(x2, y2);\n            }\n\n            if (startPos >= -zoomUnit && startPos < size + unit * zoom) {\n                const [startX, startY] = isHorizontal\n                    ? [startPos + alignOffset * -3, isDirectionStart ? 17 : height - 17]\n                    : [isDirectionStart ? 17 : width - 17, startPos + alignOffset * 3];\n\n                let text = `${value * unit}`;\n\n                if (textFormat) {\n                    text = textFormat(value * unit);\n                }\n\n                context.textAlign = textAlign;\n                if (isHorizontal) {\n                    context.fillText(text, startX + textOffset[0], startY + textOffset[1]);\n                } else {\n                    context.save();\n                    context.translate(startX + textOffset[0], startY + textOffset[1]);\n                    context.rotate(-Math.PI / 2);\n                    context.fillText(text, 0, 0);\n                    context.restore();\n                }\n            }\n        }\n        context.stroke();\n        context.restore();\n    }\n}\n","import { RulerInterface, RulerProps } from \"./types\";\n\nexport const PROPERTIES: Array<keyof RulerProps> = [\n    \"type\", \"width\", \"height\",\n    \"unit\", \"zoom\", \"style\", \"backgroundColor\", \"lineColor\",\n    \"textColor\", \"direction\",\n    \"textFormat\", \"scrollPos\",\n    \"textAlign\",\n    \"mainLineSize\", \"longLineSize\",\n    \"shortLineSize\", \"negativeRuler\",\n    \"textOffset\",\n    \"font\",\n    \"segment\",\n];\nexport const METHODS: Array<keyof RulerInterface> = [\n    \"scroll\", \"resize\",\n];\n"],"names":["tslib_1","_this","scrollPos","React","ref","style","props","canvas","canvasElement","context","getContext","canvasContext","resize","draw","_a","width","height","offsetWidth","offsetHeight","state","unit","zoom","type","backgroundColor","lineColor","textColor","direction","_b","negativeRuler","_c","segment","textFormat","isHorizontal","isDirectionStart","isNegative","font","textAlign","textOffset","containerSize","mainLineSize","convertUnitSize","longLineSize","shortLineSize","clearRect","rect","fillStyle","fill","save","scale","strokeStyle","lineWidth","textBaseline","translate","beginPath","size","zoomUnit","minRange","Math","floor","maxRange","ceil","length","alignOffset","max","indexOf","i","value","startPos","j","pos","lineSize","_d","x1","y1","_e","x2","y2","moveTo","lineTo","_f","startX","startY","text","fillText","rotate","PI","restore","stroke","Ruler","PROPERTIES","METHODS"],"mappings":"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"}